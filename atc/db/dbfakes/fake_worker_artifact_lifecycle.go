// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/concourse/atc/db"
)

type FakeWorkerArtifactLifecycle struct {
	CreateArtifactStub        func(string) (db.WorkerArtifact, error)
	createArtifactMutex       sync.RWMutex
	createArtifactArgsForCall []struct {
		arg1 string
	}
	createArtifactReturns struct {
		result1 db.WorkerArtifact
		result2 error
	}
	createArtifactReturnsOnCall map[int]struct {
		result1 db.WorkerArtifact
		result2 error
	}
	RemoveExpiredArtifactsStub        func(lager.Logger) error
	removeExpiredArtifactsMutex       sync.RWMutex
	removeExpiredArtifactsArgsForCall []struct {
		arg1 lager.Logger
	}
	removeExpiredArtifactsReturns struct {
		result1 error
	}
	removeExpiredArtifactsReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveOrphanedArtifactsStub        func(lager.Logger) error
	removeOrphanedArtifactsMutex       sync.RWMutex
	removeOrphanedArtifactsArgsForCall []struct {
		arg1 lager.Logger
	}
	removeOrphanedArtifactsReturns struct {
		result1 error
	}
	removeOrphanedArtifactsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorkerArtifactLifecycle) CreateArtifact(arg1 string) (db.WorkerArtifact, error) {
	fake.createArtifactMutex.Lock()
	ret, specificReturn := fake.createArtifactReturnsOnCall[len(fake.createArtifactArgsForCall)]
	fake.createArtifactArgsForCall = append(fake.createArtifactArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("CreateArtifact", []interface{}{arg1})
	fake.createArtifactMutex.Unlock()
	if fake.CreateArtifactStub != nil {
		return fake.CreateArtifactStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createArtifactReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWorkerArtifactLifecycle) CreateArtifactCallCount() int {
	fake.createArtifactMutex.RLock()
	defer fake.createArtifactMutex.RUnlock()
	return len(fake.createArtifactArgsForCall)
}

func (fake *FakeWorkerArtifactLifecycle) CreateArtifactCalls(stub func(string) (db.WorkerArtifact, error)) {
	fake.createArtifactMutex.Lock()
	defer fake.createArtifactMutex.Unlock()
	fake.CreateArtifactStub = stub
}

func (fake *FakeWorkerArtifactLifecycle) CreateArtifactArgsForCall(i int) string {
	fake.createArtifactMutex.RLock()
	defer fake.createArtifactMutex.RUnlock()
	argsForCall := fake.createArtifactArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWorkerArtifactLifecycle) CreateArtifactReturns(result1 db.WorkerArtifact, result2 error) {
	fake.createArtifactMutex.Lock()
	defer fake.createArtifactMutex.Unlock()
	fake.CreateArtifactStub = nil
	fake.createArtifactReturns = struct {
		result1 db.WorkerArtifact
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerArtifactLifecycle) CreateArtifactReturnsOnCall(i int, result1 db.WorkerArtifact, result2 error) {
	fake.createArtifactMutex.Lock()
	defer fake.createArtifactMutex.Unlock()
	fake.CreateArtifactStub = nil
	if fake.createArtifactReturnsOnCall == nil {
		fake.createArtifactReturnsOnCall = make(map[int]struct {
			result1 db.WorkerArtifact
			result2 error
		})
	}
	fake.createArtifactReturnsOnCall[i] = struct {
		result1 db.WorkerArtifact
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerArtifactLifecycle) RemoveExpiredArtifacts(arg1 lager.Logger) error {
	fake.removeExpiredArtifactsMutex.Lock()
	ret, specificReturn := fake.removeExpiredArtifactsReturnsOnCall[len(fake.removeExpiredArtifactsArgsForCall)]
	fake.removeExpiredArtifactsArgsForCall = append(fake.removeExpiredArtifactsArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("RemoveExpiredArtifacts", []interface{}{arg1})
	fake.removeExpiredArtifactsMutex.Unlock()
	if fake.RemoveExpiredArtifactsStub != nil {
		return fake.RemoveExpiredArtifactsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeExpiredArtifactsReturns
	return fakeReturns.result1
}

func (fake *FakeWorkerArtifactLifecycle) RemoveExpiredArtifactsCallCount() int {
	fake.removeExpiredArtifactsMutex.RLock()
	defer fake.removeExpiredArtifactsMutex.RUnlock()
	return len(fake.removeExpiredArtifactsArgsForCall)
}

func (fake *FakeWorkerArtifactLifecycle) RemoveExpiredArtifactsCalls(stub func(lager.Logger) error) {
	fake.removeExpiredArtifactsMutex.Lock()
	defer fake.removeExpiredArtifactsMutex.Unlock()
	fake.RemoveExpiredArtifactsStub = stub
}

func (fake *FakeWorkerArtifactLifecycle) RemoveExpiredArtifactsArgsForCall(i int) lager.Logger {
	fake.removeExpiredArtifactsMutex.RLock()
	defer fake.removeExpiredArtifactsMutex.RUnlock()
	argsForCall := fake.removeExpiredArtifactsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWorkerArtifactLifecycle) RemoveExpiredArtifactsReturns(result1 error) {
	fake.removeExpiredArtifactsMutex.Lock()
	defer fake.removeExpiredArtifactsMutex.Unlock()
	fake.RemoveExpiredArtifactsStub = nil
	fake.removeExpiredArtifactsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWorkerArtifactLifecycle) RemoveExpiredArtifactsReturnsOnCall(i int, result1 error) {
	fake.removeExpiredArtifactsMutex.Lock()
	defer fake.removeExpiredArtifactsMutex.Unlock()
	fake.RemoveExpiredArtifactsStub = nil
	if fake.removeExpiredArtifactsReturnsOnCall == nil {
		fake.removeExpiredArtifactsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeExpiredArtifactsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWorkerArtifactLifecycle) RemoveOrphanedArtifacts(arg1 lager.Logger) error {
	fake.removeOrphanedArtifactsMutex.Lock()
	ret, specificReturn := fake.removeOrphanedArtifactsReturnsOnCall[len(fake.removeOrphanedArtifactsArgsForCall)]
	fake.removeOrphanedArtifactsArgsForCall = append(fake.removeOrphanedArtifactsArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.recordInvocation("RemoveOrphanedArtifacts", []interface{}{arg1})
	fake.removeOrphanedArtifactsMutex.Unlock()
	if fake.RemoveOrphanedArtifactsStub != nil {
		return fake.RemoveOrphanedArtifactsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeOrphanedArtifactsReturns
	return fakeReturns.result1
}

func (fake *FakeWorkerArtifactLifecycle) RemoveOrphanedArtifactsCallCount() int {
	fake.removeOrphanedArtifactsMutex.RLock()
	defer fake.removeOrphanedArtifactsMutex.RUnlock()
	return len(fake.removeOrphanedArtifactsArgsForCall)
}

func (fake *FakeWorkerArtifactLifecycle) RemoveOrphanedArtifactsCalls(stub func(lager.Logger) error) {
	fake.removeOrphanedArtifactsMutex.Lock()
	defer fake.removeOrphanedArtifactsMutex.Unlock()
	fake.RemoveOrphanedArtifactsStub = stub
}

func (fake *FakeWorkerArtifactLifecycle) RemoveOrphanedArtifactsArgsForCall(i int) lager.Logger {
	fake.removeOrphanedArtifactsMutex.RLock()
	defer fake.removeOrphanedArtifactsMutex.RUnlock()
	argsForCall := fake.removeOrphanedArtifactsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWorkerArtifactLifecycle) RemoveOrphanedArtifactsReturns(result1 error) {
	fake.removeOrphanedArtifactsMutex.Lock()
	defer fake.removeOrphanedArtifactsMutex.Unlock()
	fake.RemoveOrphanedArtifactsStub = nil
	fake.removeOrphanedArtifactsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWorkerArtifactLifecycle) RemoveOrphanedArtifactsReturnsOnCall(i int, result1 error) {
	fake.removeOrphanedArtifactsMutex.Lock()
	defer fake.removeOrphanedArtifactsMutex.Unlock()
	fake.RemoveOrphanedArtifactsStub = nil
	if fake.removeOrphanedArtifactsReturnsOnCall == nil {
		fake.removeOrphanedArtifactsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeOrphanedArtifactsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWorkerArtifactLifecycle) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createArtifactMutex.RLock()
	defer fake.createArtifactMutex.RUnlock()
	fake.removeExpiredArtifactsMutex.RLock()
	defer fake.removeExpiredArtifactsMutex.RUnlock()
	fake.removeOrphanedArtifactsMutex.RLock()
	defer fake.removeOrphanedArtifactsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWorkerArtifactLifecycle) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.WorkerArtifactLifecycle = new(FakeWorkerArtifactLifecycle)
