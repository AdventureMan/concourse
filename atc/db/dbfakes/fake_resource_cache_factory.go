// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	sync "sync"

	lager "code.cloudfoundry.org/lager"
	atc "github.com/concourse/concourse/atc"
	creds "github.com/concourse/concourse/atc/creds"
	db "github.com/concourse/concourse/atc/db"
)

type FakeResourceCacheFactory struct {
	FindOrCreateResourceCacheStub        func(lager.Logger, db.ResourceCacheUser, string, atc.Version, atc.Source, atc.Params, creds.VersionedResourceTypes) (db.UsedResourceCache, error)
	findOrCreateResourceCacheMutex       sync.RWMutex
	findOrCreateResourceCacheArgsForCall []struct {
		arg1 lager.Logger
		arg2 db.ResourceCacheUser
		arg3 string
		arg4 atc.Version
		arg5 atc.Source
		arg6 atc.Params
		arg7 creds.VersionedResourceTypes
	}
	findOrCreateResourceCacheReturns struct {
		result1 db.UsedResourceCache
		result2 error
	}
	findOrCreateResourceCacheReturnsOnCall map[int]struct {
		result1 db.UsedResourceCache
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCache(arg1 lager.Logger, arg2 db.ResourceCacheUser, arg3 string, arg4 atc.Version, arg5 atc.Source, arg6 atc.Params, arg7 creds.VersionedResourceTypes) (db.UsedResourceCache, error) {
	fake.findOrCreateResourceCacheMutex.Lock()
	ret, specificReturn := fake.findOrCreateResourceCacheReturnsOnCall[len(fake.findOrCreateResourceCacheArgsForCall)]
	fake.findOrCreateResourceCacheArgsForCall = append(fake.findOrCreateResourceCacheArgsForCall, struct {
		arg1 lager.Logger
		arg2 db.ResourceCacheUser
		arg3 string
		arg4 atc.Version
		arg5 atc.Source
		arg6 atc.Params
		arg7 creds.VersionedResourceTypes
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.recordInvocation("FindOrCreateResourceCache", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.findOrCreateResourceCacheMutex.Unlock()
	if fake.FindOrCreateResourceCacheStub != nil {
		return fake.FindOrCreateResourceCacheStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findOrCreateResourceCacheReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheCallCount() int {
	fake.findOrCreateResourceCacheMutex.RLock()
	defer fake.findOrCreateResourceCacheMutex.RUnlock()
	return len(fake.findOrCreateResourceCacheArgsForCall)
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheCalls(stub func(lager.Logger, db.ResourceCacheUser, string, atc.Version, atc.Source, atc.Params, creds.VersionedResourceTypes) (db.UsedResourceCache, error)) {
	fake.findOrCreateResourceCacheMutex.Lock()
	defer fake.findOrCreateResourceCacheMutex.Unlock()
	fake.FindOrCreateResourceCacheStub = stub
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheArgsForCall(i int) (lager.Logger, db.ResourceCacheUser, string, atc.Version, atc.Source, atc.Params, creds.VersionedResourceTypes) {
	fake.findOrCreateResourceCacheMutex.RLock()
	defer fake.findOrCreateResourceCacheMutex.RUnlock()
	argsForCall := fake.findOrCreateResourceCacheArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheReturns(result1 db.UsedResourceCache, result2 error) {
	fake.findOrCreateResourceCacheMutex.Lock()
	defer fake.findOrCreateResourceCacheMutex.Unlock()
	fake.FindOrCreateResourceCacheStub = nil
	fake.findOrCreateResourceCacheReturns = struct {
		result1 db.UsedResourceCache
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceCacheFactory) FindOrCreateResourceCacheReturnsOnCall(i int, result1 db.UsedResourceCache, result2 error) {
	fake.findOrCreateResourceCacheMutex.Lock()
	defer fake.findOrCreateResourceCacheMutex.Unlock()
	fake.FindOrCreateResourceCacheStub = nil
	if fake.findOrCreateResourceCacheReturnsOnCall == nil {
		fake.findOrCreateResourceCacheReturnsOnCall = make(map[int]struct {
			result1 db.UsedResourceCache
			result2 error
		})
	}
	fake.findOrCreateResourceCacheReturnsOnCall[i] = struct {
		result1 db.UsedResourceCache
		result2 error
	}{result1, result2}
}

func (fake *FakeResourceCacheFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findOrCreateResourceCacheMutex.RLock()
	defer fake.findOrCreateResourceCacheMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResourceCacheFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.ResourceCacheFactory = new(FakeResourceCacheFactory)
