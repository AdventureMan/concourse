// Code generated by counterfeiter. DO NOT EDIT.
package workerfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/concourse/atc/db"
	"github.com/concourse/concourse/atc/worker"
)

type FakeImage struct {
	FetchForContainerStub        func(context.Context, lager.Logger, db.CreatingContainer) (worker.FetchedImage, error)
	fetchForContainerMutex       sync.RWMutex
	fetchForContainerArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 db.CreatingContainer
	}
	fetchForContainerReturns struct {
		result1 worker.FetchedImage
		result2 error
	}
	fetchForContainerReturnsOnCall map[int]struct {
		result1 worker.FetchedImage
		result2 error
	}
	FetchForEphemeralContainerStub        func(context.Context, lager.Logger) (worker.FetchedImage, error)
	fetchForEphemeralContainerMutex       sync.RWMutex
	fetchForEphemeralContainerArgsForCall []struct {
		arg1 context.Context
		arg2 lager.Logger
	}
	fetchForEphemeralContainerReturns struct {
		result1 worker.FetchedImage
		result2 error
	}
	fetchForEphemeralContainerReturnsOnCall map[int]struct {
		result1 worker.FetchedImage
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImage) FetchForContainer(arg1 context.Context, arg2 lager.Logger, arg3 db.CreatingContainer) (worker.FetchedImage, error) {
	fake.fetchForContainerMutex.Lock()
	ret, specificReturn := fake.fetchForContainerReturnsOnCall[len(fake.fetchForContainerArgsForCall)]
	fake.fetchForContainerArgsForCall = append(fake.fetchForContainerArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
		arg3 db.CreatingContainer
	}{arg1, arg2, arg3})
	fake.recordInvocation("FetchForContainer", []interface{}{arg1, arg2, arg3})
	fake.fetchForContainerMutex.Unlock()
	if fake.FetchForContainerStub != nil {
		return fake.FetchForContainerStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fetchForContainerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImage) FetchForContainerCallCount() int {
	fake.fetchForContainerMutex.RLock()
	defer fake.fetchForContainerMutex.RUnlock()
	return len(fake.fetchForContainerArgsForCall)
}

func (fake *FakeImage) FetchForContainerCalls(stub func(context.Context, lager.Logger, db.CreatingContainer) (worker.FetchedImage, error)) {
	fake.fetchForContainerMutex.Lock()
	defer fake.fetchForContainerMutex.Unlock()
	fake.FetchForContainerStub = stub
}

func (fake *FakeImage) FetchForContainerArgsForCall(i int) (context.Context, lager.Logger, db.CreatingContainer) {
	fake.fetchForContainerMutex.RLock()
	defer fake.fetchForContainerMutex.RUnlock()
	argsForCall := fake.fetchForContainerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeImage) FetchForContainerReturns(result1 worker.FetchedImage, result2 error) {
	fake.fetchForContainerMutex.Lock()
	defer fake.fetchForContainerMutex.Unlock()
	fake.FetchForContainerStub = nil
	fake.fetchForContainerReturns = struct {
		result1 worker.FetchedImage
		result2 error
	}{result1, result2}
}

func (fake *FakeImage) FetchForContainerReturnsOnCall(i int, result1 worker.FetchedImage, result2 error) {
	fake.fetchForContainerMutex.Lock()
	defer fake.fetchForContainerMutex.Unlock()
	fake.FetchForContainerStub = nil
	if fake.fetchForContainerReturnsOnCall == nil {
		fake.fetchForContainerReturnsOnCall = make(map[int]struct {
			result1 worker.FetchedImage
			result2 error
		})
	}
	fake.fetchForContainerReturnsOnCall[i] = struct {
		result1 worker.FetchedImage
		result2 error
	}{result1, result2}
}

func (fake *FakeImage) FetchForEphemeralContainer(arg1 context.Context, arg2 lager.Logger) (worker.FetchedImage, error) {
	fake.fetchForEphemeralContainerMutex.Lock()
	ret, specificReturn := fake.fetchForEphemeralContainerReturnsOnCall[len(fake.fetchForEphemeralContainerArgsForCall)]
	fake.fetchForEphemeralContainerArgsForCall = append(fake.fetchForEphemeralContainerArgsForCall, struct {
		arg1 context.Context
		arg2 lager.Logger
	}{arg1, arg2})
	fake.recordInvocation("FetchForEphemeralContainer", []interface{}{arg1, arg2})
	fake.fetchForEphemeralContainerMutex.Unlock()
	if fake.FetchForEphemeralContainerStub != nil {
		return fake.FetchForEphemeralContainerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fetchForEphemeralContainerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImage) FetchForEphemeralContainerCallCount() int {
	fake.fetchForEphemeralContainerMutex.RLock()
	defer fake.fetchForEphemeralContainerMutex.RUnlock()
	return len(fake.fetchForEphemeralContainerArgsForCall)
}

func (fake *FakeImage) FetchForEphemeralContainerCalls(stub func(context.Context, lager.Logger) (worker.FetchedImage, error)) {
	fake.fetchForEphemeralContainerMutex.Lock()
	defer fake.fetchForEphemeralContainerMutex.Unlock()
	fake.FetchForEphemeralContainerStub = stub
}

func (fake *FakeImage) FetchForEphemeralContainerArgsForCall(i int) (context.Context, lager.Logger) {
	fake.fetchForEphemeralContainerMutex.RLock()
	defer fake.fetchForEphemeralContainerMutex.RUnlock()
	argsForCall := fake.fetchForEphemeralContainerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeImage) FetchForEphemeralContainerReturns(result1 worker.FetchedImage, result2 error) {
	fake.fetchForEphemeralContainerMutex.Lock()
	defer fake.fetchForEphemeralContainerMutex.Unlock()
	fake.FetchForEphemeralContainerStub = nil
	fake.fetchForEphemeralContainerReturns = struct {
		result1 worker.FetchedImage
		result2 error
	}{result1, result2}
}

func (fake *FakeImage) FetchForEphemeralContainerReturnsOnCall(i int, result1 worker.FetchedImage, result2 error) {
	fake.fetchForEphemeralContainerMutex.Lock()
	defer fake.fetchForEphemeralContainerMutex.Unlock()
	fake.FetchForEphemeralContainerStub = nil
	if fake.fetchForEphemeralContainerReturnsOnCall == nil {
		fake.fetchForEphemeralContainerReturnsOnCall = make(map[int]struct {
			result1 worker.FetchedImage
			result2 error
		})
	}
	fake.fetchForEphemeralContainerReturnsOnCall[i] = struct {
		result1 worker.FetchedImage
		result2 error
	}{result1, result2}
}

func (fake *FakeImage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchForContainerMutex.RLock()
	defer fake.fetchForContainerMutex.RUnlock()
	fake.fetchForEphemeralContainerMutex.RLock()
	defer fake.fetchForEphemeralContainerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ worker.Image = new(FakeImage)
