// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	sync "sync"

	atc "github.com/concourse/concourse/atc"
	v2 "github.com/concourse/concourse/atc/resource/v2"
)

type FakeGetEventHandler struct {
	SaveMetadataStub        func(atc.Metadata) error
	saveMetadataMutex       sync.RWMutex
	saveMetadataArgsForCall []struct {
		arg1 atc.Metadata
	}
	saveMetadataReturns struct {
		result1 error
	}
	saveMetadataReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGetEventHandler) SaveMetadata(arg1 atc.Metadata) error {
	fake.saveMetadataMutex.Lock()
	ret, specificReturn := fake.saveMetadataReturnsOnCall[len(fake.saveMetadataArgsForCall)]
	fake.saveMetadataArgsForCall = append(fake.saveMetadataArgsForCall, struct {
		arg1 atc.Metadata
	}{arg1})
	fake.recordInvocation("SaveMetadata", []interface{}{arg1})
	fake.saveMetadataMutex.Unlock()
	if fake.SaveMetadataStub != nil {
		return fake.SaveMetadataStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.saveMetadataReturns
	return fakeReturns.result1
}

func (fake *FakeGetEventHandler) SaveMetadataCallCount() int {
	fake.saveMetadataMutex.RLock()
	defer fake.saveMetadataMutex.RUnlock()
	return len(fake.saveMetadataArgsForCall)
}

func (fake *FakeGetEventHandler) SaveMetadataCalls(stub func(atc.Metadata) error) {
	fake.saveMetadataMutex.Lock()
	defer fake.saveMetadataMutex.Unlock()
	fake.SaveMetadataStub = stub
}

func (fake *FakeGetEventHandler) SaveMetadataArgsForCall(i int) atc.Metadata {
	fake.saveMetadataMutex.RLock()
	defer fake.saveMetadataMutex.RUnlock()
	argsForCall := fake.saveMetadataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGetEventHandler) SaveMetadataReturns(result1 error) {
	fake.saveMetadataMutex.Lock()
	defer fake.saveMetadataMutex.Unlock()
	fake.SaveMetadataStub = nil
	fake.saveMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGetEventHandler) SaveMetadataReturnsOnCall(i int, result1 error) {
	fake.saveMetadataMutex.Lock()
	defer fake.saveMetadataMutex.Unlock()
	fake.SaveMetadataStub = nil
	if fake.saveMetadataReturnsOnCall == nil {
		fake.saveMetadataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveMetadataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGetEventHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.saveMetadataMutex.RLock()
	defer fake.saveMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGetEventHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.GetEventHandler = new(FakeGetEventHandler)
