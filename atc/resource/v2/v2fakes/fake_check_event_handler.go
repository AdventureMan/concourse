// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	sync "sync"

	atc "github.com/concourse/concourse/atc"
	v2 "github.com/concourse/concourse/atc/resource/v2"
)

type FakeCheckEventHandler struct {
	DefaultSpaceStub        func(atc.Space) error
	defaultSpaceMutex       sync.RWMutex
	defaultSpaceArgsForCall []struct {
		arg1 atc.Space
	}
	defaultSpaceReturns struct {
		result1 error
	}
	defaultSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	DiscoveredStub        func(atc.Space, atc.Version, atc.Metadata) error
	discoveredMutex       sync.RWMutex
	discoveredArgsForCall []struct {
		arg1 atc.Space
		arg2 atc.Version
		arg3 atc.Metadata
	}
	discoveredReturns struct {
		result1 error
	}
	discoveredReturnsOnCall map[int]struct {
		result1 error
	}
	LatestVersionsStub        func() error
	latestVersionsMutex       sync.RWMutex
	latestVersionsArgsForCall []struct {
	}
	latestVersionsReturns struct {
		result1 error
	}
	latestVersionsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCheckEventHandler) DefaultSpace(arg1 atc.Space) error {
	fake.defaultSpaceMutex.Lock()
	ret, specificReturn := fake.defaultSpaceReturnsOnCall[len(fake.defaultSpaceArgsForCall)]
	fake.defaultSpaceArgsForCall = append(fake.defaultSpaceArgsForCall, struct {
		arg1 atc.Space
	}{arg1})
	fake.recordInvocation("DefaultSpace", []interface{}{arg1})
	fake.defaultSpaceMutex.Unlock()
	if fake.DefaultSpaceStub != nil {
		return fake.DefaultSpaceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.defaultSpaceReturns
	return fakeReturns.result1
}

func (fake *FakeCheckEventHandler) DefaultSpaceCallCount() int {
	fake.defaultSpaceMutex.RLock()
	defer fake.defaultSpaceMutex.RUnlock()
	return len(fake.defaultSpaceArgsForCall)
}

func (fake *FakeCheckEventHandler) DefaultSpaceCalls(stub func(atc.Space) error) {
	fake.defaultSpaceMutex.Lock()
	defer fake.defaultSpaceMutex.Unlock()
	fake.DefaultSpaceStub = stub
}

func (fake *FakeCheckEventHandler) DefaultSpaceArgsForCall(i int) atc.Space {
	fake.defaultSpaceMutex.RLock()
	defer fake.defaultSpaceMutex.RUnlock()
	argsForCall := fake.defaultSpaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCheckEventHandler) DefaultSpaceReturns(result1 error) {
	fake.defaultSpaceMutex.Lock()
	defer fake.defaultSpaceMutex.Unlock()
	fake.DefaultSpaceStub = nil
	fake.defaultSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCheckEventHandler) DefaultSpaceReturnsOnCall(i int, result1 error) {
	fake.defaultSpaceMutex.Lock()
	defer fake.defaultSpaceMutex.Unlock()
	fake.DefaultSpaceStub = nil
	if fake.defaultSpaceReturnsOnCall == nil {
		fake.defaultSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.defaultSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCheckEventHandler) Discovered(arg1 atc.Space, arg2 atc.Version, arg3 atc.Metadata) error {
	fake.discoveredMutex.Lock()
	ret, specificReturn := fake.discoveredReturnsOnCall[len(fake.discoveredArgsForCall)]
	fake.discoveredArgsForCall = append(fake.discoveredArgsForCall, struct {
		arg1 atc.Space
		arg2 atc.Version
		arg3 atc.Metadata
	}{arg1, arg2, arg3})
	fake.recordInvocation("Discovered", []interface{}{arg1, arg2, arg3})
	fake.discoveredMutex.Unlock()
	if fake.DiscoveredStub != nil {
		return fake.DiscoveredStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.discoveredReturns
	return fakeReturns.result1
}

func (fake *FakeCheckEventHandler) DiscoveredCallCount() int {
	fake.discoveredMutex.RLock()
	defer fake.discoveredMutex.RUnlock()
	return len(fake.discoveredArgsForCall)
}

func (fake *FakeCheckEventHandler) DiscoveredCalls(stub func(atc.Space, atc.Version, atc.Metadata) error) {
	fake.discoveredMutex.Lock()
	defer fake.discoveredMutex.Unlock()
	fake.DiscoveredStub = stub
}

func (fake *FakeCheckEventHandler) DiscoveredArgsForCall(i int) (atc.Space, atc.Version, atc.Metadata) {
	fake.discoveredMutex.RLock()
	defer fake.discoveredMutex.RUnlock()
	argsForCall := fake.discoveredArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCheckEventHandler) DiscoveredReturns(result1 error) {
	fake.discoveredMutex.Lock()
	defer fake.discoveredMutex.Unlock()
	fake.DiscoveredStub = nil
	fake.discoveredReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCheckEventHandler) DiscoveredReturnsOnCall(i int, result1 error) {
	fake.discoveredMutex.Lock()
	defer fake.discoveredMutex.Unlock()
	fake.DiscoveredStub = nil
	if fake.discoveredReturnsOnCall == nil {
		fake.discoveredReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.discoveredReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCheckEventHandler) LatestVersions() error {
	fake.latestVersionsMutex.Lock()
	ret, specificReturn := fake.latestVersionsReturnsOnCall[len(fake.latestVersionsArgsForCall)]
	fake.latestVersionsArgsForCall = append(fake.latestVersionsArgsForCall, struct {
	}{})
	fake.recordInvocation("LatestVersions", []interface{}{})
	fake.latestVersionsMutex.Unlock()
	if fake.LatestVersionsStub != nil {
		return fake.LatestVersionsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.latestVersionsReturns
	return fakeReturns.result1
}

func (fake *FakeCheckEventHandler) LatestVersionsCallCount() int {
	fake.latestVersionsMutex.RLock()
	defer fake.latestVersionsMutex.RUnlock()
	return len(fake.latestVersionsArgsForCall)
}

func (fake *FakeCheckEventHandler) LatestVersionsCalls(stub func() error) {
	fake.latestVersionsMutex.Lock()
	defer fake.latestVersionsMutex.Unlock()
	fake.LatestVersionsStub = stub
}

func (fake *FakeCheckEventHandler) LatestVersionsReturns(result1 error) {
	fake.latestVersionsMutex.Lock()
	defer fake.latestVersionsMutex.Unlock()
	fake.LatestVersionsStub = nil
	fake.latestVersionsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCheckEventHandler) LatestVersionsReturnsOnCall(i int, result1 error) {
	fake.latestVersionsMutex.Lock()
	defer fake.latestVersionsMutex.Unlock()
	fake.LatestVersionsStub = nil
	if fake.latestVersionsReturnsOnCall == nil {
		fake.latestVersionsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.latestVersionsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCheckEventHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.defaultSpaceMutex.RLock()
	defer fake.defaultSpaceMutex.RUnlock()
	fake.discoveredMutex.RLock()
	defer fake.discoveredMutex.RUnlock()
	fake.latestVersionsMutex.RLock()
	defer fake.latestVersionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCheckEventHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.CheckEventHandler = new(FakeCheckEventHandler)
