// Code generated by counterfeiter. DO NOT EDIT.
package tokenfakes

import (
	"net/http"
	"sync"
	"time"

	"github.com/concourse/concourse/skymarshal/token"
)

type FakeMiddleware struct {
	GetTokenStub        func(*http.Request) string
	getTokenMutex       sync.RWMutex
	getTokenArgsForCall []struct {
		arg1 *http.Request
	}
	getTokenReturns struct {
		result1 string
	}
	getTokenReturnsOnCall map[int]struct {
		result1 string
	}
	SetTokenStub        func(http.ResponseWriter, string, time.Time) error
	setTokenMutex       sync.RWMutex
	setTokenArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 string
		arg3 time.Time
	}
	setTokenReturns struct {
		result1 error
	}
	setTokenReturnsOnCall map[int]struct {
		result1 error
	}
	UnsetTokenStub        func(http.ResponseWriter)
	unsetTokenMutex       sync.RWMutex
	unsetTokenArgsForCall []struct {
		arg1 http.ResponseWriter
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMiddleware) GetToken(arg1 *http.Request) string {
	fake.getTokenMutex.Lock()
	ret, specificReturn := fake.getTokenReturnsOnCall[len(fake.getTokenArgsForCall)]
	fake.getTokenArgsForCall = append(fake.getTokenArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("GetToken", []interface{}{arg1})
	fake.getTokenMutex.Unlock()
	if fake.GetTokenStub != nil {
		return fake.GetTokenStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getTokenReturns
	return fakeReturns.result1
}

func (fake *FakeMiddleware) GetTokenCallCount() int {
	fake.getTokenMutex.RLock()
	defer fake.getTokenMutex.RUnlock()
	return len(fake.getTokenArgsForCall)
}

func (fake *FakeMiddleware) GetTokenCalls(stub func(*http.Request) string) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = stub
}

func (fake *FakeMiddleware) GetTokenArgsForCall(i int) *http.Request {
	fake.getTokenMutex.RLock()
	defer fake.getTokenMutex.RUnlock()
	argsForCall := fake.getTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMiddleware) GetTokenReturns(result1 string) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = nil
	fake.getTokenReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeMiddleware) GetTokenReturnsOnCall(i int, result1 string) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = nil
	if fake.getTokenReturnsOnCall == nil {
		fake.getTokenReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getTokenReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeMiddleware) SetToken(arg1 http.ResponseWriter, arg2 string, arg3 time.Time) error {
	fake.setTokenMutex.Lock()
	ret, specificReturn := fake.setTokenReturnsOnCall[len(fake.setTokenArgsForCall)]
	fake.setTokenArgsForCall = append(fake.setTokenArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 string
		arg3 time.Time
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetToken", []interface{}{arg1, arg2, arg3})
	fake.setTokenMutex.Unlock()
	if fake.SetTokenStub != nil {
		return fake.SetTokenStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setTokenReturns
	return fakeReturns.result1
}

func (fake *FakeMiddleware) SetTokenCallCount() int {
	fake.setTokenMutex.RLock()
	defer fake.setTokenMutex.RUnlock()
	return len(fake.setTokenArgsForCall)
}

func (fake *FakeMiddleware) SetTokenCalls(stub func(http.ResponseWriter, string, time.Time) error) {
	fake.setTokenMutex.Lock()
	defer fake.setTokenMutex.Unlock()
	fake.SetTokenStub = stub
}

func (fake *FakeMiddleware) SetTokenArgsForCall(i int) (http.ResponseWriter, string, time.Time) {
	fake.setTokenMutex.RLock()
	defer fake.setTokenMutex.RUnlock()
	argsForCall := fake.setTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMiddleware) SetTokenReturns(result1 error) {
	fake.setTokenMutex.Lock()
	defer fake.setTokenMutex.Unlock()
	fake.SetTokenStub = nil
	fake.setTokenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMiddleware) SetTokenReturnsOnCall(i int, result1 error) {
	fake.setTokenMutex.Lock()
	defer fake.setTokenMutex.Unlock()
	fake.SetTokenStub = nil
	if fake.setTokenReturnsOnCall == nil {
		fake.setTokenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setTokenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMiddleware) UnsetToken(arg1 http.ResponseWriter) {
	fake.unsetTokenMutex.Lock()
	fake.unsetTokenArgsForCall = append(fake.unsetTokenArgsForCall, struct {
		arg1 http.ResponseWriter
	}{arg1})
	fake.recordInvocation("UnsetToken", []interface{}{arg1})
	fake.unsetTokenMutex.Unlock()
	if fake.UnsetTokenStub != nil {
		fake.UnsetTokenStub(arg1)
	}
}

func (fake *FakeMiddleware) UnsetTokenCallCount() int {
	fake.unsetTokenMutex.RLock()
	defer fake.unsetTokenMutex.RUnlock()
	return len(fake.unsetTokenArgsForCall)
}

func (fake *FakeMiddleware) UnsetTokenCalls(stub func(http.ResponseWriter)) {
	fake.unsetTokenMutex.Lock()
	defer fake.unsetTokenMutex.Unlock()
	fake.UnsetTokenStub = stub
}

func (fake *FakeMiddleware) UnsetTokenArgsForCall(i int) http.ResponseWriter {
	fake.unsetTokenMutex.RLock()
	defer fake.unsetTokenMutex.RUnlock()
	argsForCall := fake.unsetTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMiddleware) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTokenMutex.RLock()
	defer fake.getTokenMutex.RUnlock()
	fake.setTokenMutex.RLock()
	defer fake.setTokenMutex.RUnlock()
	fake.unsetTokenMutex.RLock()
	defer fake.unsetTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMiddleware) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ token.Middleware = new(FakeMiddleware)
